@{
    ViewData["Title"] = "Admin Dashboard";
}

<h2 class="mb-4">Manage Files</h2>

<div class="d-flex justify-content-center mb-4">
    <div class="card p-4 shadow" style="width: 100%; max-width: 600px;">
        <h4 class="mb-4 text-center">Upload Files</h4>

        <form id="uploadForm" asp-controller="Home" asp-action="UploadFiles" method="post"
            enctype="multipart/form-data">
            <div id="dropzone" class="upload-dropzone">
                <i class="fas fa-cloud-upload-alt"></i>
                <p class="mb-2">Drag & drop your files here</p>
                <p class="text-muted">or click to browse (PDF, DOC, TXT)</p>
                <input type="file" name="files" id="fileInput" class="hidden-input" accept=".pdf,.doc,.docx,.txt"
                    multiple>
            </div>

            <p id="fileNameDisplay" class="mt-3 text-center text-success fw-semibold"></p>

            <div class="mt-4 d-grid">
                <button type="submit" class="btn btn-primary">Upload</button>
            </div>
        </form>
    </div>
</div>

@* <h2 class="mb-4">Your Files</h2> *@

<div id="filesPartialView">
    @await Html.PartialAsync("_FilesPartial")
</div>

<script>
    const dropzone = document.getElementById('dropzone');
    const fileInput = document.getElementById('fileInput');
    const fileNameDisplay = document.getElementById('fileNameDisplay');
    const form = document.getElementById('uploadForm');

    let allFiles = [];

    function updateFileNameDisplay(files) {
        if (files.length > 0) {
            const names = files.map(f => f.name).join(', ');
            fileNameDisplay.innerHTML = `<strong>Selected Files: </strong>${names}`;
        } else {
            fileNameDisplay.textContent = '';
        }
    }

    dropzone.addEventListener('click', () => fileInput.click());

    // Handle click selection
    fileInput.addEventListener('change', () => {
        const selectedFiles = Array.from(fileInput.files);

        // Filter out duplicates (optional)
        const existingFileNames = new Set(allFiles.map(f => f.name));
        const newUniqueFiles = selectedFiles.filter(f => !existingFileNames.has(f.name));

        allFiles = allFiles.concat(newUniqueFiles); // Append only new ones
        updateFileNameDisplay(allFiles);

        // Reset input so same file can be selected again if needed
        fileInput.value = '';
    });

    // Drag styling
    dropzone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropzone.classList.add('dragover');
    });

    dropzone.addEventListener('dragleave', () => {
        dropzone.classList.remove('dragover');
    });

    dropzone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropzone.classList.remove('dragover');

        const droppedFiles = Array.from(e.dataTransfer.files);
        allFiles = allFiles.concat(droppedFiles); // append to existing
        updateFileNameDisplay(allFiles);
    });

    // Submit files manually with FormData
    form.addEventListener('submit', (e) => {
        e.preventDefault();

        if (allFiles.length === 0) {
            alert("Please select at least one file.");
            return;
        }

        const formData = new FormData();
        allFiles.forEach(file => formData.append('files', file));

        fetch(form.action, {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    return response.text();
                }
            })
            .catch(err => {
                console.error('Upload error:', err);
            });
    });


</script>
